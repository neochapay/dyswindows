/************************************************************************
 *   Copyright (C) Andrew Suffield <asuffield@debian.org>
 *
 *   This library is free software; you can redistribute it and/or
 *   modify it under the terms of the GNU Lesser General Public
 *   License as published by the Free Software Foundation; either
 *   version 2.1 of the License, or (at your option) any later version.
 *
 *   This library is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *   Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public
 *   License along with this library; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef Y_CPP_EXCEPTION_H
#define Y_CPP_EXCEPTION_H

#include <Y/c++/message.h>

#include <exception>
#include <string>

namespace Y
{
  class Connection;

  /** \defgroup exceptions Exceptions
   *
   * @{
   */

  /** \brief Exception superclass
   *
   * All exceptions generated by the libYc++ library should inherit
   * from this class.
   */
  class exception : std::exception
  {
  public:
    exception(const std::string& str_) : y(NULL), str(str_) {}
    exception(Connection *y_, const std::string& str_) : y(y_), str(str_) {}
    virtual ~exception() throw() {}

    virtual const char *what() const throw() {return str.c_str();}
    virtual Connection *connection() const throw() {return y;}

  private:
    Connection *y;
    std::string str;
  };

  /** \brief Server error
   *
   * This exception indicates that the server returned an error
   * message. It should be treated as a programming error, and should
   * be suitably emitted by the application on the client host.
   *
   * After handling this exception, the client connection is probably
   * still viable and normal processing can be resumed, but the state
   * of the operation which generated an error is undefined.
   */
  class error : exception
  {
  public:
    error(const Y::Message::Members& tuple) : exception(tuple.pretty()) {}
  };

  /** \brief Protocol error
   *
   * This exception indicates that there was an error in the protocol
   * stream from the server. It should be treated as a fatal error,
   * and the connection should be immediately shut down.
   */
  class protocol_error : exception
  {
  public:
    protocol_error(const std::string &str) : exception(str) {}
  };

  /**
   * @}
   */
}


#endif

/* arch-tag: 6f55be17-f9c1-4db4-88e0-63e18211f32b
 */
